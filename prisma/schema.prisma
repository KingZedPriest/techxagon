generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Schemas

model VerificationCode {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  code      String
  expiresAt DateTime

  @@unique([email, code])
}

model Admin {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  email          String   @unique
  hashedPassword String
  role           String   @default("admin")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model School {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String    @unique
  schoolLogo String?
  location   String?
  motto      String?
  teachers   Teacher[]
  students   Student[]
  exams      Exam[]
  classes    Class[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Student {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String?  @unique
  name      String
  regNumber String   @unique
  deleted   Boolean  @default(false)
  suspended Boolean  @default(false)
  class     Class    @relation(fields: [classId], references: [id])
  school    School?  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId  String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  classId   String   @db.ObjectId
}

// Class model
model Class {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  name      AvailableClasses @unique
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  School    School?          @relation(fields: [schoolId], references: [id])
  schoolId  String?          @db.ObjectId
  Student   Student[]
  Exam      Exam?            @relation(fields: [examId], references: [id])
  examId    String?          @db.ObjectId
}

// Teacher model
model Teacher {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String   @unique
  exams          Exam[]
  hashedPassword String
  role           String   @default("teacher")
  suspended      Boolean  @default(false)
  deleted        Boolean  @default(false)
  school         School?  @relation(fields: [schoolId], references: [id], onDelete: Restrict)
  schoolId       String?  @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// Exam model
model Exam {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  examId        String     @unique
  duration      Int
  noOfQuestions Int
  score         Int
  isTaken       Boolean    @default(false)
  classes       Class[]
  teacher       Teacher?    @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId     String?    @db.ObjectId
  questions     Question[]
  school        School?    @relation(fields: [schoolId], references: [id])
  schoolId      String?    @db.ObjectId
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// Question model
model Question {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  question      String
  options       String[]
  correctOption String
  exam          Exam?    @relation(fields: [examId], references: [id], onDelete: Cascade)
  examId        String?  @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Enums
enum AvailableClasses {
  JSS1A
  JSS1B
  JSS1C
  JSS1D
  JSS1E
  JSS2A
  JSS2B
  JSS2C
  JSS2D
  JSS2E
  JSS3A
  JSS3B
  JSS3C
  JSS3D
  JSS3E
  SS1A
  SS1B
  SS1C
  SS1D
  SS1E
  SS2A
  SS2B
  SS2C
  SS2D
  SS2E
  SS3A
  SS3B
  SS3C
  SS3D
  SS3E
}
